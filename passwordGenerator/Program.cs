using PasswordGenerator.Models;
using PasswordGenerator.Services;

namespace PasswordGenerator;

class Program
{
    private static readonly PasswordGeneratorService _generator = new();
    private static readonly PasswordStrengthChecker _checker = new();

    static void Main(string[] args)
    {
        Console.OutputEncoding = System.Text.Encoding.UTF8;
        
        ShowWelcomeMessage();

        while (true)
        {
            ShowMenu();
            var choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    GenerateSinglePassword();
                    break;
                case "2":
                    GenerateMultiplePasswords();
                    break;
                case "3":
                    CheckPasswordStrength();
                    break;
                case "4":
                    ShowOptions();
                    break;
                case "0":
                    Console.WriteLine("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã");
                    return;
                default:
                    Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    break;
            }

            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
            Console.Clear();
        }
    }

    static void ShowWelcomeMessage()
    {
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.WriteLine("====================================");
        Console.WriteLine("      üîê –ì–ï–ù–ï–†–ê–¢–û–† –ü–ê–†–û–õ–ï–ô");
        Console.WriteLine("====================================");
        Console.ResetColor();
        Console.WriteLine();
    }

    static void ShowMenu()
    {
        Console.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        Console.WriteLine("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å");
        Console.WriteLine("2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π");
        Console.WriteLine("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è");
        Console.WriteLine("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
        Console.WriteLine("0. –í—ã—Ö–æ–¥");
        Console.Write("–í–∞—à –≤—ã–±–æ—Ä: ");
    }

    static void GenerateSinglePassword()
    {
        Console.WriteLine("\n--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è ---");
        
        var options = GetPasswordOptions();
        var password = _generator.GeneratePassword(options);
        var result = _checker.AnalyzePassword(password);

        DisplayPasswordResult(result);
    }

    static void GenerateMultiplePasswords()
    {
        Console.Write("\n–°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? ");
        if (!int.TryParse(Console.ReadLine(), out int count) || count < 1)
        {
            Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
            return;
        }

        var options = GetPasswordOptions();
        
        Console.WriteLine($"\n--- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ ({count} —à—Ç.) ---");
        
        for (int i = 0; i < count; i++)
        {
            var password = _generator.GeneratePassword(options);
            var result = _checker.AnalyzePassword(password);
            
            Console.WriteLine($"{i + 1}. {result.Password} [{result.Strength}]");
        }
    }

    static void CheckPasswordStrength()
    {
        Console.Write("\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ");
        var password = Console.ReadLine() ?? "";

        var result = _checker.AnalyzePassword(password);
        DisplayPasswordResult(result);
    }

    static void ShowOptions()
    {
        Console.WriteLine("\n--- –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---");
        Console.WriteLine("–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π");
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    }

    static PasswordOptions GetPasswordOptions()
    {
        var options = new PasswordOptions();

        Console.Write("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12): ");
        if (int.TryParse(Console.ReadLine(), out int length) && length > 0)
            options.Length = length;

        Console.Write("–í–∫–ª—é—á–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ");
        var response = Console.ReadLine()?.ToLower();
        options.IncludeUppercase = response != "n";

        Console.Write("–í–∫–ª—é—á–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ");
        response = Console.ReadLine()?.ToLower();
        options.IncludeLowercase = response != "n";

        Console.Write("–í–∫–ª—é—á–∞—Ç—å —Ü–∏—Ñ—Ä—ã? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ");
        response = Console.ReadLine()?.ToLower();
        options.IncludeNumbers = response != "n";

        Console.Write("–í–∫–ª—é—á–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ");
        response = Console.ReadLine()?.ToLower();
        options.IncludeSpecialChars = response != "n";

        Console.Write("–ò—Å–∫–ª—é—á–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã (1,l,I,0,O)? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ");
        response = Console.ReadLine()?.ToLower();
